
LCD1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005584  08005584  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800558c  0800558c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000010  080055a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080055a4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010351  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c2  00000000  00000000  00030391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00032758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000336c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175d6  00000000  00000000  00034538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b86  00000000  00000000  0004bb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097b56  00000000  00000000  0005e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f61ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004290  00000000  00000000  000f623c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005554 	.word	0x08005554

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005554 	.word	0x08005554

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f023 030f 	bic.w	r3, r3, #15
 8000cc8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f043 030c 	orr.w	r3, r3, #12
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	f043 030c 	orr.w	r3, r3, #12
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cf8:	f107 0208 	add.w	r2, r7, #8
 8000cfc:	2364      	movs	r3, #100	; 0x64
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2304      	movs	r3, #4
 8000d02:	214e      	movs	r1, #78	; 0x4e
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <lcd_send_cmd+0x5c>)
 8000d06:	f002 f8db 	bl	8002ec0 <HAL_I2C_Master_Transmit>
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000074 	.word	0x20000074

08000d18 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f023 030f 	bic.w	r3, r3, #15
 8000d28:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	f043 030d 	orr.w	r3, r3, #13
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	f043 0309 	orr.w	r3, r3, #9
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d44:	7bbb      	ldrb	r3, [r7, #14]
 8000d46:	f043 030d 	orr.w	r3, r3, #13
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	f043 0309 	orr.w	r3, r3, #9
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d58:	f107 0208 	add.w	r2, r7, #8
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2304      	movs	r3, #4
 8000d62:	214e      	movs	r1, #78	; 0x4e
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <lcd_send_data+0x5c>)
 8000d66:	f002 f8ab 	bl	8002ec0 <HAL_I2C_Master_Transmit>
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000074 	.word	0x20000074

08000d78 <lcd_clear>:

void lcd_clear (void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000d7e:	2080      	movs	r0, #128	; 0x80
 8000d80:	f7ff ff9a 	bl	8000cb8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	e005      	b.n	8000d96 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000d8a:	2020      	movs	r0, #32
 8000d8c:	f7ff ffc4 	bl	8000d18 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3301      	adds	r3, #1
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b45      	cmp	r3, #69	; 0x45
 8000d9a:	ddf6      	ble.n	8000d8a <lcd_clear+0x12>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
    switch (row)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <lcd_put_cur+0x18>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d005      	beq.n	8000dc8 <lcd_put_cur+0x22>
 8000dbc:	e009      	b.n	8000dd2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	603b      	str	r3, [r7, #0]
            break;
 8000dc6:	e004      	b.n	8000dd2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000dce:	603b      	str	r3, [r7, #0]
            break;
 8000dd0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff6e 	bl	8000cb8 <lcd_send_cmd>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <lcd_init>:


void lcd_init (void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000de8:	2032      	movs	r0, #50	; 0x32
 8000dea:	f001 f861 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dee:	2030      	movs	r0, #48	; 0x30
 8000df0:	f7ff ff62 	bl	8000cb8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000df4:	2005      	movs	r0, #5
 8000df6:	f001 f85b 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dfa:	2030      	movs	r0, #48	; 0x30
 8000dfc:	f7ff ff5c 	bl	8000cb8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e00:	2001      	movs	r0, #1
 8000e02:	f001 f855 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e06:	2030      	movs	r0, #48	; 0x30
 8000e08:	f7ff ff56 	bl	8000cb8 <lcd_send_cmd>
	HAL_Delay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f001 f84f 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e12:	2020      	movs	r0, #32
 8000e14:	f7ff ff50 	bl	8000cb8 <lcd_send_cmd>
	HAL_Delay(10);
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f001 f849 	bl	8001eb0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e1e:	2028      	movs	r0, #40	; 0x28
 8000e20:	f7ff ff4a 	bl	8000cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f001 f843 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e2a:	2008      	movs	r0, #8
 8000e2c:	f7ff ff44 	bl	8000cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f001 f83d 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff ff3e 	bl	8000cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f001 f837 	bl	8001eb0 <HAL_Delay>
	HAL_Delay(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f001 f834 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e48:	2006      	movs	r0, #6
 8000e4a:	f7ff ff35 	bl	8000cb8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f001 f82e 	bl	8001eb0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e54:	200c      	movs	r0, #12
 8000e56:	f7ff ff2f 	bl	8000cb8 <lcd_send_cmd>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM3){   // cada dos minutos cambia de noche a mañana
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10d      	bne.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x2e>
	flag*=-1;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b25a      	sxtb	r2, r3
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e82:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000e84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e8a:	f001 feba 	bl	8002c02 <HAL_GPIO_TogglePin>
	}
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40000400 	.word	0x40000400
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	40020c00 	.word	0x40020c00
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <sensor_distancia>:


void sensor_distancia(){
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
				uint16_t dist=0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	80fb      	strh	r3, [r7, #6]
					HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	486a      	ldr	r0, [pc, #424]	; (8001060 <sensor_distancia+0x1b8>)
 8000eb8:	f001 fe8a 	bl	8002bd0 <HAL_GPIO_WritePin>
		 	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ebc:	4b69      	ldr	r3, [pc, #420]	; (8001064 <sensor_distancia+0x1bc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
		 	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000ec4:	bf00      	nop
 8000ec6:	4b67      	ldr	r3, [pc, #412]	; (8001064 <sensor_distancia+0x1bc>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	d9fa      	bls.n	8000ec6 <sensor_distancia+0x1e>
		 	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4862      	ldr	r0, [pc, #392]	; (8001060 <sensor_distancia+0x1b8>)
 8000ed6:	f001 fe7b 	bl	8002bd0 <HAL_GPIO_WritePin>

		 	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000eda:	f000 ffdd 	bl	8001e98 <HAL_GetTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a61      	ldr	r2, [pc, #388]	; (8001068 <sensor_distancia+0x1c0>)
 8000ee2:	6013      	str	r3, [r2, #0]
		 	      // wait for the echo pin to go high
		 	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000ee4:	bf00      	nop
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	485d      	ldr	r0, [pc, #372]	; (8001060 <sensor_distancia+0x1b8>)
 8000eea:	f001 fe59 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d108      	bne.n	8000f06 <sensor_distancia+0x5e>
 8000ef4:	4b5c      	ldr	r3, [pc, #368]	; (8001068 <sensor_distancia+0x1c0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f103 040a 	add.w	r4, r3, #10
 8000efc:	f000 ffcc 	bl	8001e98 <HAL_GetTick>
 8000f00:	4603      	mov	r3, r0
 8000f02:	429c      	cmp	r4, r3
 8000f04:	d8ef      	bhi.n	8000ee6 <sensor_distancia+0x3e>
		 	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f06:	4b57      	ldr	r3, [pc, #348]	; (8001064 <sensor_distancia+0x1bc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	4a57      	ldr	r2, [pc, #348]	; (800106c <sensor_distancia+0x1c4>)
 8000f0e:	6013      	str	r3, [r2, #0]

		 	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000f10:	f000 ffc2 	bl	8001e98 <HAL_GetTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a54      	ldr	r2, [pc, #336]	; (8001068 <sensor_distancia+0x1c0>)
 8000f18:	6013      	str	r3, [r2, #0]
		 	      // wait for the echo pin to go low
		 	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000f1a:	bf00      	nop
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	4850      	ldr	r0, [pc, #320]	; (8001060 <sensor_distancia+0x1b8>)
 8000f20:	f001 fe3e 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d008      	beq.n	8000f3c <sensor_distancia+0x94>
 8000f2a:	4b4f      	ldr	r3, [pc, #316]	; (8001068 <sensor_distancia+0x1c0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000f32:	f000 ffb1 	bl	8001e98 <HAL_GetTick>
 8000f36:	4603      	mov	r3, r0
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	d8ef      	bhi.n	8000f1c <sensor_distancia+0x74>
		 	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000f3c:	4b49      	ldr	r3, [pc, #292]	; (8001064 <sensor_distancia+0x1bc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <sensor_distancia+0x1c8>)
 8000f44:	6013      	str	r3, [r2, #0]

		 	      Distance = (Value2-Value1)* 0.034/2;
 8000f46:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <sensor_distancia+0x1c8>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b48      	ldr	r3, [pc, #288]	; (800106c <sensor_distancia+0x1c4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fa83 	bl	800045c <__aeabi_ui2d>
 8000f56:	a340      	add	r3, pc, #256	; (adr r3, 8001058 <sensor_distancia+0x1b0>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f7ff faf8 	bl	8000550 <__aeabi_dmul>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f70:	f7ff fc18 	bl	80007a4 <__aeabi_ddiv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fcfa 	bl	8000974 <__aeabi_d2uiz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <sensor_distancia+0x1cc>)
 8000f86:	701a      	strb	r2, [r3, #0]
		 	      distancia=Distance+48;
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <sensor_distancia+0x1cc>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	3330      	adds	r3, #48	; 0x30
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b39      	ldr	r3, [pc, #228]	; (8001078 <sensor_distancia+0x1d0>)
 8000f92:	701a      	strb	r2, [r3, #0]

		 	      HAL_Delay(50);
 8000f94:	2032      	movs	r0, #50	; 0x32
 8000f96:	f000 ff8b 	bl	8001eb0 <HAL_Delay>

		 	     // if(HAL_GetTick()-tiempo>1000){
		 	    	 if(Distance>=10 &&  Distance<20){
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <sensor_distancia+0x1cc>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b09      	cmp	r3, #9
 8000fa0:	d920      	bls.n	8000fe4 <sensor_distancia+0x13c>
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <sensor_distancia+0x1cc>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b13      	cmp	r3, #19
 8000fa8:	d81c      	bhi.n	8000fe4 <sensor_distancia+0x13c>

			 	           dist=Distance-10;
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <sensor_distancia+0x1cc>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3b0a      	subs	r3, #10
 8000fb2:	80fb      	strh	r3, [r7, #6]
			 	           lcd_put_cur(0,0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fef5 	bl	8000da6 <lcd_put_cur>
			 	           lcd_send_data(49);
 8000fbc:	2031      	movs	r0, #49	; 0x31
 8000fbe:	f7ff feab 	bl	8000d18 <lcd_send_data>
			 	           lcd_put_cur(0,1);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff feee 	bl	8000da6 <lcd_put_cur>
			 	           lcd_send_data(dist+48);
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	3330      	adds	r3, #48	; 0x30
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fea0 	bl	8000d18 <lcd_send_data>
			 	           HAL_Delay(500);
 8000fd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fdc:	f000 ff68 	bl	8001eb0 <HAL_Delay>
			 	           lcd_clear();
 8000fe0:	f7ff feca 	bl	8000d78 <lcd_clear>


		 	    	 }
		 	    	 if(Distance>=20 &&  Distance<30){
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <sensor_distancia+0x1cc>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b13      	cmp	r3, #19
 8000fea:	d921      	bls.n	8001030 <sensor_distancia+0x188>
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <sensor_distancia+0x1cc>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b1d      	cmp	r3, #29
 8000ff2:	d81d      	bhi.n	8001030 <sensor_distancia+0x188>

		 	    				 	           dist=Distance-20;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <sensor_distancia+0x1cc>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	3b14      	subs	r3, #20
 8000ffc:	80fb      	strh	r3, [r7, #6]
		 	    				 	           lcd_put_cur(0,0);
 8000ffe:	2100      	movs	r1, #0
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff fed0 	bl	8000da6 <lcd_put_cur>
		 	    				 	           lcd_send_data(50);
 8001006:	2032      	movs	r0, #50	; 0x32
 8001008:	f7ff fe86 	bl	8000d18 <lcd_send_data>
		 	    				 	           lcd_put_cur(0,1);
 800100c:	2101      	movs	r1, #1
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fec9 	bl	8000da6 <lcd_put_cur>
		 	    				 	           lcd_send_data(dist+48);
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3330      	adds	r3, #48	; 0x30
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fe7b 	bl	8000d18 <lcd_send_data>
		 	    				 	           HAL_Delay(500);
 8001022:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001026:	f000 ff43 	bl	8001eb0 <HAL_Delay>
		 	    				 	           lcd_clear();
 800102a:	f7ff fea5 	bl	8000d78 <lcd_clear>
 800102e:	e008      	b.n	8001042 <sensor_distancia+0x19a>


		 	    			 	    	 }
		 	    	 else{

		 	    		 lcd_send_data(distancia);
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <sensor_distancia+0x1d0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fe6f 	bl	8000d18 <lcd_send_data>
		 	    		 lcd_put_cur(0,0);
 800103a:	2100      	movs	r1, #0
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff feb2 	bl	8000da6 <lcd_put_cur>
		 	    		// lcd_clear();
		 	    	 }
		 	     // HAL_Delay(1000);
		 	    //  lcd_clear();

		 	      if (Distance < 10){
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <sensor_distancia+0x1cc>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d802      	bhi.n	8001050 <sensor_distancia+0x1a8>
		 	    	 // HAL_GPIO_WritePin (GPIOD,GPIO_PIN_12,1);
		 	    	  alarma =1;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <sensor_distancia+0x1d4>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

		 	      }


	  }
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	b020c49c 	.word	0xb020c49c
 800105c:	3fa16872 	.word	0x3fa16872
 8001060:	40020000 	.word	0x40020000
 8001064:	20000110 	.word	0x20000110
 8001068:	200001a0 	.word	0x200001a0
 800106c:	200001a4 	.word	0x200001a4
 8001070:	200001a8 	.word	0x200001a8
 8001074:	200001ac 	.word	0x200001ac
 8001078:	200001b4 	.word	0x200001b4
 800107c:	200001c4 	.word	0x200001c4

08001080 <microfono>:
void microfono(){
 8001080:	b580      	push	{r7, lr}
 8001082:	f5ad 4dc5 	sub.w	sp, sp, #25216	; 0x6280
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
	int n = 50;
 800108a:	2332      	movs	r3, #50	; 0x32
 800108c:	f507 42c4 	add.w	r2, r7, #25088	; 0x6200
 8001090:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8001094:	6013      	str	r3, [r2, #0]
	int binary[1600],temp[1600];
	int buf[1600];
	int sum = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 800109c:	f102 0214 	add.w	r2, r2, #20
 80010a0:	6013      	str	r3, [r2, #0]
	int son = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80010a8:	f102 0210 	add.w	r2, r2, #16
 80010ac:	6013      	str	r3, [r2, #0]
	uint16_t sound_in[3000];

	  HAL_I2S_Receive(&hi2s2,sound_in, n, 1000);
 80010ae:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 80010b2:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f107 0118 	add.w	r1, r7, #24
 80010be:	3918      	subs	r1, #24
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	48c4      	ldr	r0, [pc, #784]	; (80013d8 <microfono+0x358>)
 80010c6:	f002 fb43 	bl	8003750 <HAL_I2S_Receive>

	  for (int i = 0; i < n; i++) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80010d0:	f102 020c 	add.w	r2, r2, #12
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e091      	b.n	80011fc <microfono+0x17c>
		for (int j = 0; j < 16; j++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80010de:	f102 0208 	add.w	r2, r2, #8
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e03c      	b.n	8001160 <microfono+0xe0>
			binary[j] = sound_in[i] % 2;
 80010e6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80010ea:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80010ee:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80010f2:	f102 020c 	add.w	r2, r2, #12
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010fc:	f003 0101 	and.w	r1, r3, #1
 8001100:	f507 43a5 	add.w	r3, r7, #21120	; 0x5280
 8001104:	f103 0318 	add.w	r3, r3, #24
 8001108:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 800110c:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 8001110:	f102 0208 	add.w	r2, r2, #8
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			sound_in[i] = sound_in[i]/2;
 800111a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800111e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001122:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 8001126:	f102 020c 	add.w	r2, r2, #12
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001130:	085b      	lsrs	r3, r3, #1
 8001132:	b299      	uxth	r1, r3
 8001134:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001138:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800113c:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 8001140:	f102 020c 	add.w	r2, r2, #12
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int j = 0; j < 16; j++) {
 800114a:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 800114e:	f103 0308 	add.w	r3, r3, #8
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 800115a:	f102 0208 	add.w	r2, r2, #8
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 8001164:	f103 0308 	add.w	r3, r3, #8
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	ddbb      	ble.n	80010e6 <microfono+0x66>
		}

		//reverse
		for (int j = 0; j < 16; j++) {
 800116e:	2300      	movs	r3, #0
 8001170:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 8001174:	f102 0204 	add.w	r2, r2, #4
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e02d      	b.n	80011d8 <microfono+0x158>
			temp[i * 16 + j] = binary[15 - j];
 800117c:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 8001180:	f103 0304 	add.w	r3, r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f1c3 010f 	rsb	r1, r3, #15
 800118a:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 800118e:	f103 030c 	add.w	r3, r3, #12
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	011a      	lsls	r2, r3, #4
 8001196:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 800119a:	f103 0304 	add.w	r3, r3, #4
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	441a      	add	r2, r3
 80011a2:	f507 43a5 	add.w	r3, r7, #21120	; 0x5280
 80011a6:	f103 0318 	add.w	r3, r3, #24
 80011aa:	f6a3 1328 	subw	r3, r3, #2344	; 0x928
 80011ae:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80011b2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80011b6:	f103 0318 	add.w	r3, r3, #24
 80011ba:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80011be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < 16; j++) {
 80011c2:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 80011c6:	f103 0304 	add.w	r3, r3, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80011d2:	f102 0204 	add.w	r2, r2, #4
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 80011dc:	f103 0304 	add.w	r3, r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	ddca      	ble.n	800117c <microfono+0xfc>
	  for (int i = 0; i < n; i++) {
 80011e6:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 80011ea:	f103 030c 	add.w	r3, r3, #12
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80011f6:	f102 020c 	add.w	r2, r2, #12
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 8001200:	f103 030c 	add.w	r3, r3, #12
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 800120a:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	f6ff af61 	blt.w	80010d8 <microfono+0x58>
		}
	  }

	for (int i = 7; i + 8 < n*16; i++) {
 8001216:	2307      	movs	r3, #7
 8001218:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e06e      	b.n	80012fe <microfono+0x27e>
		sum = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 8001226:	f102 0214 	add.w	r2, r2, #20
 800122a:	6013      	str	r3, [r2, #0]
		for (int j = -7; j <= 8; j++)
 800122c:	f06f 0306 	mvn.w	r3, #6
 8001230:	f507 42c4 	add.w	r2, r7, #25088	; 0x6200
 8001234:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e026      	b.n	800128a <microfono+0x20a>
			sum += temp[i + j];
 800123c:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 8001246:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	441a      	add	r2, r3
 800124e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001252:	f103 0318 	add.w	r3, r3, #24
 8001256:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800125a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125e:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 8001262:	f102 0214 	add.w	r2, r2, #20
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	4413      	add	r3, r2
 800126a:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 800126e:	f102 0214 	add.w	r2, r2, #20
 8001272:	6013      	str	r3, [r2, #0]
		for (int j = -7; j <= 8; j++)
 8001274:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 8001278:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	f507 42c4 	add.w	r2, r7, #25088	; 0x6200
 8001284:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 800128e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b08      	cmp	r3, #8
 8001296:	ddd1      	ble.n	800123c <microfono+0x1bc>
		if(sum - 8 < 0)  buf[i] = -(sum-8);
 8001298:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 800129c:	f103 0314 	add.w	r3, r3, #20
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	dc12      	bgt.n	80012cc <microfono+0x24c>
 80012a6:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 80012aa:	f103 0314 	add.w	r3, r3, #20
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1c3 0108 	rsb	r1, r3, #8
 80012b4:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80012b8:	f103 0318 	add.w	r3, r3, #24
 80012bc:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 80012c0:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80012ca:	e011      	b.n	80012f0 <microfono+0x270>
		else buf[i] = sum-8;
 80012cc:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 80012d0:	f103 0314 	add.w	r3, r3, #20
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f1a3 0108 	sub.w	r1, r3, #8
 80012da:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 80012de:	f103 0318 	add.w	r3, r3, #24
 80012e2:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 80012e6:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 7; i + 8 < n*16; i++) {
 80012f0:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f103 0208 	add.w	r2, r3, #8
 8001308:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 800130c:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	429a      	cmp	r2, r3
 8001316:	db83      	blt.n	8001220 <microfono+0x1a0>
	}

	vol =0;
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <microfono+0x35c>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
	for (int i = 14; i + 16 < n*16; i++) {
 800131e:	230e      	movs	r3, #14
 8001320:	f507 42c4 	add.w	r2, r7, #25088	; 0x6200
 8001324:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e03c      	b.n	80013a6 <microfono+0x326>
		for (int j = -7; j <= 8; j++)
 800132c:	f06f 0306 	mvn.w	r3, #6
 8001330:	f507 42c4 	add.w	r2, r7, #25088	; 0x6200
 8001334:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e022      	b.n	8001382 <microfono+0x302>
			vol += buf[i + j];
 800133c:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 8001340:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 800134a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	441a      	add	r2, r3
 8001352:	f507 530a 	add.w	r3, r7, #8832	; 0x2280
 8001356:	f103 0318 	add.w	r3, r3, #24
 800135a:	f6a3 3328 	subw	r3, r3, #2856	; 0xb28
 800135e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <microfono+0x35c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <microfono+0x35c>)
 800136a:	6013      	str	r3, [r2, #0]
		for (int j = -7; j <= 8; j++)
 800136c:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 8001370:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	f507 42c4 	add.w	r2, r7, #25088	; 0x6200
 800137c:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 8001386:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b08      	cmp	r3, #8
 800138e:	ddd5      	ble.n	800133c <microfono+0x2bc>
	for (int i = 14; i + 16 < n*16; i++) {
 8001390:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 8001394:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	f507 42c4 	add.w	r2, r7, #25088	; 0x6200
 80013a0:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 80013aa:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f103 0210 	add.w	r2, r3, #16
 80013b4:	f507 43c4 	add.w	r3, r7, #25088	; 0x6200
 80013b8:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbb3      	blt.n	800132c <microfono+0x2ac>
	}

	ja  = 0;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <microfono+0x360>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
	son = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80013d0:	f102 0210 	add.w	r2, r2, #16
 80013d4:	6013      	str	r3, [r2, #0]
	while (vol > 500){
 80013d6:	e01b      	b.n	8001410 <microfono+0x390>
 80013d8:	200000c8 	.word	0x200000c8
 80013dc:	200001bc 	.word	0x200001bc
 80013e0:	200001b8 	.word	0x200001b8
		ja  +=1;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <microfono+0x3cc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <microfono+0x3cc>)
 80013ec:	6013      	str	r3, [r2, #0]
		son +=1;
 80013ee:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 80013f2:	f103 0310 	add.w	r3, r3, #16
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	f507 42c5 	add.w	r2, r7, #25216	; 0x6280
 80013fe:	f102 0210 	add.w	r2, r2, #16
 8001402:	6013      	str	r3, [r2, #0]
		vol -= 500;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <microfono+0x3d0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800140c:	4a10      	ldr	r2, [pc, #64]	; (8001450 <microfono+0x3d0>)
 800140e:	6013      	str	r3, [r2, #0]
	while (vol > 500){
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <microfono+0x3d0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001418:	dce4      	bgt.n	80013e4 <microfono+0x364>
	}
	if (son>60){
 800141a:	f507 43c5 	add.w	r3, r7, #25216	; 0x6280
 800141e:	f103 0310 	add.w	r3, r3, #16
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b3c      	cmp	r3, #60	; 0x3c
 8001426:	dd0b      	ble.n	8001440 <microfono+0x3c0>
		alarma_MIC += 1;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <microfono+0x3d4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <microfono+0x3d4>)
 8001430:	6013      	str	r3, [r2, #0]
		if (alarma_MIC>1){
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <microfono+0x3d4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	dd02      	ble.n	8001440 <microfono+0x3c0>
			alarma =1;
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <microfono+0x3d8>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001440:	bf00      	nop
 8001442:	f507 47c5 	add.w	r7, r7, #25216	; 0x6280
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001b8 	.word	0x200001b8
 8001450:	200001bc 	.word	0x200001bc
 8001454:	200001c0 	.word	0x200001c0
 8001458:	200001c4 	.word	0x200001c4

0800145c <ldr>:

void ldr(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	  HAL_ADC_Start(&hadc1);
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <ldr+0x34>)
 8001462:	f000 fd8d 	bl	8001f80 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001466:	2164      	movs	r1, #100	; 0x64
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <ldr+0x34>)
 800146a:	f000 fe3d 	bl	80020e8 <HAL_ADC_PollForConversion>
	  ADC_val = HAL_ADC_GetValue(&hadc1);
 800146e:	4808      	ldr	r0, [pc, #32]	; (8001490 <ldr+0x34>)
 8001470:	f000 fec5 	bl	80021fe <HAL_ADC_GetValue>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <ldr+0x38>)
 800147a:	801a      	strh	r2, [r3, #0]


	  if(ADC_val>300){
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <ldr+0x38>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001484:	d902      	bls.n	800148c <ldr+0x30>
		  alarma =1;
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <ldr+0x3c>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
	  }
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000002c 	.word	0x2000002c
 8001494:	200001b6 	.word	0x200001b6
 8001498:	200001c4 	.word	0x200001c4

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 fc94 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f854 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f000 fa06 	bl	80018b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014ac:	f000 f90a 	bl	80016c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80014b0:	f000 f964 	bl	800177c <MX_TIM1_Init>
  MX_ADC1_Init();
 80014b4:	f000 f8b4 	bl	8001620 <MX_ADC1_Init>
  MX_I2S2_Init();
 80014b8:	f000 f932 	bl	8001720 <MX_I2S2_Init>
  MX_TIM3_Init();
 80014bc:	f000 f9ae 	bl	800181c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80014c0:	481c      	ldr	r0, [pc, #112]	; (8001534 <main+0x98>)
 80014c2:	f003 fbcb 	bl	8004c5c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80014c6:	481c      	ldr	r0, [pc, #112]	; (8001538 <main+0x9c>)
 80014c8:	f003 fc22 	bl	8004d10 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80014cc:	2200      	movs	r2, #0
 80014ce:	2104      	movs	r1, #4
 80014d0:	481a      	ldr	r0, [pc, #104]	; (800153c <main+0xa0>)
 80014d2:	f001 fb7d 	bl	8002bd0 <HAL_GPIO_WritePin>
  lcd_init();
 80014d6:	f7ff fc85 	bl	8000de4 <lcd_init>
  tiempo=HAL_GetTick();
 80014da:	f000 fcdd 	bl	8001e98 <HAL_GetTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <main+0xa4>)
 80014e2:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 80014e4:	2110      	movs	r1, #16
 80014e6:	4815      	ldr	r0, [pc, #84]	; (800153c <main+0xa0>)
 80014e8:	f001 fb5a 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01a      	beq.n	8001528 <main+0x8c>

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2120      	movs	r1, #32
 80014f6:	4811      	ldr	r0, [pc, #68]	; (800153c <main+0xa0>)
 80014f8:	f001 fb6a 	bl	8002bd0 <HAL_GPIO_WritePin>


	   sensor_distancia();
 80014fc:	f7ff fcd4 	bl	8000ea8 <sensor_distancia>
	   microfono();
 8001500:	f7ff fdbe 	bl	8001080 <microfono>

		 	  if(flag>0){ // se enciended si es de noche==1
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <main+0xa8>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	dd01      	ble.n	8001512 <main+0x76>
		 	  ldr();
 800150e:	f7ff ffa5 	bl	800145c <ldr>

		 	  }

		 	  if ((alarma == 1)){
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <main+0xac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d1e4      	bne.n	80014e4 <main+0x48>
		 		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001520:	480a      	ldr	r0, [pc, #40]	; (800154c <main+0xb0>)
 8001522:	f001 fb55 	bl	8002bd0 <HAL_GPIO_WritePin>
 8001526:	e7dd      	b.n	80014e4 <main+0x48>

		 	  }
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	2120      	movs	r1, #32
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <main+0xa0>)
 800152e:	f001 fb4f 	bl	8002bd0 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8001532:	e7d7      	b.n	80014e4 <main+0x48>
 8001534:	20000110 	.word	0x20000110
 8001538:	20000158 	.word	0x20000158
 800153c:	40020000 	.word	0x40020000
 8001540:	200001b0 	.word	0x200001b0
 8001544:	20000000 	.word	0x20000000
 8001548:	200001c4 	.word	0x200001c4
 800154c:	40020c00 	.word	0x40020c00

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2230      	movs	r2, #48	; 0x30
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fff0 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <SystemClock_Config+0xc8>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a26      	ldr	r2, [pc, #152]	; (8001618 <SystemClock_Config+0xc8>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <SystemClock_Config+0xc8>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <SystemClock_Config+0xcc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a20      	ldr	r2, [pc, #128]	; (800161c <SystemClock_Config+0xcc>)
 800159a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <SystemClock_Config+0xcc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b6:	2302      	movs	r3, #2
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015c0:	2304      	movs	r3, #4
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015c4:	2348      	movs	r3, #72	; 0x48
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015cc:	2308      	movs	r3, #8
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fd1d 	bl	8004014 <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e0:	f000 fa08 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80015f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	2102      	movs	r1, #2
 8001600:	4618      	mov	r0, r3
 8001602:	f002 ff7f 	bl	8004504 <HAL_RCC_ClockConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800160c:	f000 f9f2 	bl	80019f4 <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3750      	adds	r7, #80	; 0x50
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001634:	4a21      	ldr	r2, [pc, #132]	; (80016bc <MX_ADC1_Init+0x9c>)
 8001636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001648:	2201      	movs	r2, #1
 800164a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_ADC1_Init+0x98>)
 800164e:	2201      	movs	r2, #1
 8001650:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_ADC1_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <MX_ADC1_Init+0xa0>)
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_ADC1_Init+0x98>)
 800166e:	2201      	movs	r2, #1
 8001670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_ADC1_Init+0x98>)
 800167c:	2201      	movs	r2, #1
 800167e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001682:	f000 fc39 	bl	8001ef8 <HAL_ADC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800168c:	f000 f9b2 	bl	80019f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001690:	2301      	movs	r3, #1
 8001692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_ADC1_Init+0x98>)
 80016a2:	f000 fdb9 	bl	8002218 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016ac:	f000 f9a2 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2000002c 	.word	0x2000002c
 80016bc:	40012000 	.word	0x40012000
 80016c0:	0f000001 	.word	0x0f000001

080016c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_I2C1_Init+0x50>)
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <MX_I2C1_Init+0x54>)
 80016cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_I2C1_Init+0x50>)
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <MX_I2C1_Init+0x58>)
 80016d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_I2C1_Init+0x50>)
 80016e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_I2C1_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_I2C1_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_I2C1_Init+0x50>)
 8001702:	f001 fa99 	bl	8002c38 <HAL_I2C_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800170c:	f000 f972 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000074 	.word	0x20000074
 8001718:	40005400 	.word	0x40005400
 800171c:	000186a0 	.word	0x000186a0

08001720 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_I2S2_Init+0x54>)
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <MX_I2S2_Init+0x58>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_I2S2_Init+0x54>)
 800172c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001730:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_I2S2_Init+0x54>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_I2S2_Init+0x54>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_I2S2_Init+0x54>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_I2S2_Init+0x54>)
 8001746:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800174a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_I2S2_Init+0x54>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_I2S2_Init+0x54>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_I2S2_Init+0x54>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_I2S2_Init+0x54>)
 8001760:	f001 feb6 	bl	80034d0 <HAL_I2S_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800176a:	f000 f943 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200000c8 	.word	0x200000c8
 8001778:	40003800 	.word	0x40003800

0800177c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_TIM1_Init+0x98>)
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <MX_TIM1_Init+0x9c>)
 800179c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_TIM1_Init+0x98>)
 80017a0:	2247      	movs	r2, #71	; 0x47
 80017a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_TIM1_Init+0x98>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_TIM1_Init+0x98>)
 80017ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_TIM1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM1_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_TIM1_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <MX_TIM1_Init+0x98>)
 80017c6:	f003 f9f9 	bl	8004bbc <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80017d0:	f000 f910 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_TIM1_Init+0x98>)
 80017e2:	f003 fbff 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80017ec:	f000 f902 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_TIM1_Init+0x98>)
 80017fe:	f003 fdfb 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001808:	f000 f8f4 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000110 	.word	0x20000110
 8001818:	40010000 	.word	0x40010000

0800181c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_TIM3_Init+0x94>)
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <MX_TIM3_Init+0x98>)
 800183c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65532;
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001840:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8001844:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65532;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_TIM3_Init+0x94>)
 800184e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8001852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_TIM3_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001860:	4813      	ldr	r0, [pc, #76]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001862:	f003 f9ab 	bl	8004bbc <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800186c:	f000 f8c2 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4619      	mov	r1, r3
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <MX_TIM3_Init+0x94>)
 800187e:	f003 fbb1 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001888:	f000 f8b4 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_TIM3_Init+0x94>)
 800189a:	f003 fdad 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018a4:	f000 f8a6 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000158 	.word	0x20000158
 80018b4:	40000400 	.word	0x40000400

080018b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <MX_GPIO_Init+0x130>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <MX_GPIO_Init+0x130>)
 80018d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <MX_GPIO_Init+0x130>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <MX_GPIO_Init+0x130>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <MX_GPIO_Init+0x130>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <MX_GPIO_Init+0x130>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <MX_GPIO_Init+0x130>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <MX_GPIO_Init+0x130>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <MX_GPIO_Init+0x130>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <MX_GPIO_Init+0x130>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <MX_GPIO_Init+0x130>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <MX_GPIO_Init+0x130>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <MX_GPIO_Init+0x130>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <MX_GPIO_Init+0x130>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <MX_GPIO_Init+0x130>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_5, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2124      	movs	r1, #36	; 0x24
 800195e:	4823      	ldr	r0, [pc, #140]	; (80019ec <MX_GPIO_Init+0x134>)
 8001960:	f001 f936 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800196a:	4821      	ldr	r0, [pc, #132]	; (80019f0 <MX_GPIO_Init+0x138>)
 800196c:	f001 f930 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8001970:	2324      	movs	r3, #36	; 0x24
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4819      	ldr	r0, [pc, #100]	; (80019ec <MX_GPIO_Init+0x134>)
 8001988:	f000 ff86 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800198c:	2318      	movs	r3, #24
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4813      	ldr	r0, [pc, #76]	; (80019ec <MX_GPIO_Init+0x134>)
 80019a0:	f000 ff7a 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <MX_GPIO_Init+0x138>)
 80019be:	f000 ff6b 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_GPIO_Init+0x138>)
 80019dc:	f000 ff5c 	bl	8002898 <HAL_GPIO_Init>

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40020c00 	.word	0x40020c00

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a3e:	2007      	movs	r0, #7
 8001a40:	f000 fee8 	bl	8002814 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800

08001a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_ADC_MspInit+0x7c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d127      	bne.n	8001ac2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_ADC_MspInit+0x80>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <HAL_ADC_MspInit+0x80>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_ADC_MspInit+0x80>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_ADC_MspInit+0x80>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_ADC_MspInit+0x80>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_ADC_MspInit+0x80>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_ADC_MspInit+0x84>)
 8001abe:	f000 feeb 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_I2C_MspInit+0x84>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12b      	bne.n	8001b52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b16:	23c0      	movs	r3, #192	; 0xc0
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1a:	2312      	movs	r3, #18
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b26:	2304      	movs	r3, #4
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <HAL_I2C_MspInit+0x8c>)
 8001b32:	f000 feb1 	bl	8002898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_I2C_MspInit+0x88>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020400 	.word	0x40020400

08001b68 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b090      	sub	sp, #64	; 0x40
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <HAL_I2S_MspInit+0xf8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d15c      	bne.n	8001c56 <HAL_I2S_MspInit+0xee>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001ba0:	23c8      	movs	r3, #200	; 0xc8
 8001ba2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 feb3 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8001bbc:	f7ff ff1a 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	4a26      	ldr	r2, [pc, #152]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bce:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6313      	str	r3, [r2, #48]	; 0x30
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	6313      	str	r3, [r2, #48]	; 0x30
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_I2S_MspInit+0xfc>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c14:	2308      	movs	r3, #8
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c24:	2305      	movs	r3, #5
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <HAL_I2S_MspInit+0x100>)
 8001c30:	f000 fe32 	bl	8002898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001c34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c46:	2305      	movs	r3, #5
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <HAL_I2S_MspInit+0x104>)
 8001c52:	f000 fe21 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3740      	adds	r7, #64	; 0x40
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40003800 	.word	0x40003800
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_TIM_Base_MspInit+0x70>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_TIM_Base_MspInit+0x74>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_TIM_Base_MspInit+0x74>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_TIM_Base_MspInit+0x74>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c9e:	e01a      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_TIM_Base_MspInit+0x78>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d115      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_TIM_Base_MspInit+0x74>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_TIM_Base_MspInit+0x74>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_TIM_Base_MspInit+0x74>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	201d      	movs	r0, #29
 8001ccc:	f000 fdad 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cd0:	201d      	movs	r0, #29
 8001cd2:	f000 fdc6 	bl	8002862 <HAL_NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40000400 	.word	0x40000400

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f000 f89a 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <TIM3_IRQHandler+0x10>)
 8001d46:	f003 f845 	bl	8004dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000158 	.word	0x20000158

08001d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <SystemInit+0x20>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <SystemInit+0x20>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */    ldr r0, =_sdata
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d7e:	490e      	ldr	r1, [pc, #56]	; (8001db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d94:	4c0b      	ldr	r4, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da2:	f7ff ffd7 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f003 fba9 	bl	80054fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7ff fb77 	bl	800149c <main>
  bx  lr    
 8001dae:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8001db0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */    ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001dbc:	08005594 	.word	0x08005594
  ldr r2, =_sbss
 8001dc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001dc4:	200001cc 	.word	0x200001cc

08001dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 fd0d 	bl	8002814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fdfe 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fd25 	bl	800287e <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f000 fced 	bl	800282a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000004 	.word	0x20000004
 8001e68:	2000000c 	.word	0x2000000c
 8001e6c:	20000008 	.word	0x20000008

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	200001c8 	.word	0x200001c8

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200001c8 	.word	0x200001c8

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000000c 	.word	0x2000000c

08001ef8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e033      	b.n	8001f76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fd9a 	bl	8001a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f3e:	f023 0302 	bic.w	r3, r3, #2
 8001f42:	f043 0202 	orr.w	r2, r3, #2
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fa96 	bl	800247c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f023 0303 	bic.w	r3, r3, #3
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
 8001f66:	e001      	b.n	8001f6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Start+0x1a>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e097      	b.n	80020ca <HAL_ADC_Start+0x14a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d018      	beq.n	8001fe2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc0:	4b45      	ldr	r3, [pc, #276]	; (80020d8 <HAL_ADC_Start+0x158>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a45      	ldr	r2, [pc, #276]	; (80020dc <HAL_ADC_Start+0x15c>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9a      	lsrs	r2, r3, #18
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f9      	bne.n	8001fd6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d15f      	bne.n	80020b0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800201a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202e:	d106      	bne.n	800203e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	f023 0206 	bic.w	r2, r3, #6
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	645a      	str	r2, [r3, #68]	; 0x44
 800203c:	e002      	b.n	8002044 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_ADC_Start+0x160>)
 800204e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002058:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d129      	bne.n	80020c8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e020      	b.n	80020c8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_ADC_Start+0x164>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d11b      	bne.n	80020c8 <HAL_ADC_Start+0x148>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d114      	bne.n	80020c8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	e00b      	b.n	80020c8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f043 0210 	orr.w	r2, r3, #16
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000004 	.word	0x20000004
 80020dc:	431bde83 	.word	0x431bde83
 80020e0:	40012300 	.word	0x40012300
 80020e4:	40012000 	.word	0x40012000

080020e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002104:	d113      	bne.n	800212e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002114:	d10b      	bne.n	800212e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f043 0220 	orr.w	r2, r3, #32
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e063      	b.n	80021f6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800212e:	f7ff feb3 	bl	8001e98 <HAL_GetTick>
 8002132:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002134:	e021      	b.n	800217a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d01d      	beq.n	800217a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_ADC_PollForConversion+0x6c>
 8002144:	f7ff fea8 	bl	8001e98 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d212      	bcs.n	800217a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b02      	cmp	r3, #2
 8002160:	d00b      	beq.n	800217a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f043 0204 	orr.w	r2, r3, #4
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e03d      	b.n	80021f6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b02      	cmp	r3, #2
 8002186:	d1d6      	bne.n	8002136 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0212 	mvn.w	r2, #18
 8002190:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d123      	bne.n	80021f4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d11f      	bne.n	80021f4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d111      	bne.n	80021f4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1c>
 8002230:	2302      	movs	r3, #2
 8002232:	e113      	b.n	800245c <HAL_ADC_ConfigChannel+0x244>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d925      	bls.n	8002290 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68d9      	ldr	r1, [r3, #12]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	3b1e      	subs	r3, #30
 800225a:	2207      	movs	r2, #7
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	4603      	mov	r3, r0
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4403      	add	r3, r0
 8002282:	3b1e      	subs	r3, #30
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	e022      	b.n	80022d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6919      	ldr	r1, [r3, #16]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	2207      	movs	r2, #7
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4403      	add	r3, r0
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d824      	bhi.n	8002328 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	3b05      	subs	r3, #5
 80022f0:	221f      	movs	r2, #31
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	3b05      	subs	r3, #5
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
 8002326:	e04c      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d824      	bhi.n	800237a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b23      	subs	r3, #35	; 0x23
 8002342:	221f      	movs	r2, #31
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b23      	subs	r3, #35	; 0x23
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
 8002378:	e023      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b41      	subs	r3, #65	; 0x41
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b41      	subs	r3, #65	; 0x41
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_ADC_ConfigChannel+0x250>)
 80023c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_ADC_ConfigChannel+0x254>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10f      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d8>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_ADC_ConfigChannel+0x254>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d12b      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_ADC_ConfigChannel+0x258>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <HAL_ADC_ConfigChannel+0x1f4>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b11      	cmp	r3, #17
 800240a:	d122      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_ADC_ConfigChannel+0x258>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d111      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_ADC_ConfigChannel+0x25c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_ADC_ConfigChannel+0x260>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	0c9a      	lsrs	r2, r3, #18
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002444:	e002      	b.n	800244c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3b01      	subs	r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f9      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40012300 	.word	0x40012300
 800246c:	40012000 	.word	0x40012000
 8002470:	10000012 	.word	0x10000012
 8002474:	20000004 	.word	0x20000004
 8002478:	431bde83 	.word	0x431bde83

0800247c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002484:	4b79      	ldr	r3, [pc, #484]	; (800266c <ADC_Init+0x1f0>)
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	021a      	lsls	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	4a58      	ldr	r2, [pc, #352]	; (8002670 <ADC_Init+0x1f4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002522:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6899      	ldr	r1, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	e00f      	b.n	800257a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002578:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0202 	bic.w	r2, r2, #2
 8002588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6899      	ldr	r1, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7e1b      	ldrb	r3, [r3, #24]
 8002594:	005a      	lsls	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	3b01      	subs	r3, #1
 80025d4:	035a      	lsls	r2, r3, #13
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	e007      	b.n	80025f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	3b01      	subs	r3, #1
 800260c:	051a      	lsls	r2, r3, #20
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002632:	025a      	lsls	r2, r3, #9
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	029a      	lsls	r2, r3, #10
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40012300 	.word	0x40012300
 8002670:	0f000001 	.word	0x0f000001

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e0:	d301      	bcc.n	80027e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00f      	b.n	8002806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <SysTick_Config+0x40>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ee:	210f      	movs	r1, #15
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f7ff ff8e 	bl	8002714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <SysTick_Config+0x40>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <SysTick_Config+0x40>)
 8002800:	2207      	movs	r2, #7
 8002802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000e010 	.word	0xe000e010

08002814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff29 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800283c:	f7ff ff3e 	bl	80026bc <__NVIC_GetPriorityGrouping>
 8002840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	6978      	ldr	r0, [r7, #20]
 8002848:	f7ff ff8e 	bl	8002768 <NVIC_EncodePriority>
 800284c:	4602      	mov	r2, r0
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff5d 	bl	8002714 <__NVIC_SetPriority>
}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff31 	bl	80026d8 <__NVIC_EnableIRQ>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffa2 	bl	80027d0 <SysTick_Config>
 800288c:	4603      	mov	r3, r0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e159      	b.n	8002b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f040 8148 	bne.w	8002b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d005      	beq.n	80028ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d130      	bne.n	800294c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 0201 	and.w	r2, r3, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d017      	beq.n	8002988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d123      	bne.n	80029dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a2 	beq.w	8002b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b57      	ldr	r3, [pc, #348]	; (8002b80 <HAL_GPIO_Init+0x2e8>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a56      	ldr	r2, [pc, #344]	; (8002b80 <HAL_GPIO_Init+0x2e8>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b54      	ldr	r3, [pc, #336]	; (8002b80 <HAL_GPIO_Init+0x2e8>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3a:	4a52      	ldr	r2, [pc, #328]	; (8002b84 <HAL_GPIO_Init+0x2ec>)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a49      	ldr	r2, [pc, #292]	; (8002b88 <HAL_GPIO_Init+0x2f0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_Init+0x202>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a48      	ldr	r2, [pc, #288]	; (8002b8c <HAL_GPIO_Init+0x2f4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0x1fe>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a47      	ldr	r2, [pc, #284]	; (8002b90 <HAL_GPIO_Init+0x2f8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_Init+0x1fa>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a46      	ldr	r2, [pc, #280]	; (8002b94 <HAL_GPIO_Init+0x2fc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x1f6>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_Init+0x1f2>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f002 0203 	and.w	r2, r2, #3
 8002aa2:	0092      	lsls	r2, r2, #2
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aac:	4935      	ldr	r1, [pc, #212]	; (8002b84 <HAL_GPIO_Init+0x2ec>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0e:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b32:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b5c:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	f67f aea2 	bls.w	80028b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	e001      	b.n	8002bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c14:	887a      	ldrh	r2, [r7, #2]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	041a      	lsls	r2, r3, #16
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	400b      	ands	r3, r1
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12b      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe ff3a 	bl	8001ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f001 fe2a 	bl	80048f4 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a81      	ldr	r2, [pc, #516]	; (8002eac <HAL_I2C_Init+0x274>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <HAL_I2C_Init+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a80      	ldr	r2, [pc, #512]	; (8002eb0 <HAL_I2C_Init+0x278>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e006      	b.n	8002cca <HAL_I2C_Init+0x92>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a7d      	ldr	r2, [pc, #500]	; (8002eb4 <HAL_I2C_Init+0x27c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0e7      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a78      	ldr	r2, [pc, #480]	; (8002eb8 <HAL_I2C_Init+0x280>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a6a      	ldr	r2, [pc, #424]	; (8002eac <HAL_I2C_Init+0x274>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <HAL_I2C_Init+0xd4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	e009      	b.n	8002d20 <HAL_I2C_Init+0xe8>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	4a69      	ldr	r2, [pc, #420]	; (8002ebc <HAL_I2C_Init+0x284>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	495c      	ldr	r1, [pc, #368]	; (8002eac <HAL_I2C_Init+0x274>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d819      	bhi.n	8002d74 <HAL_I2C_Init+0x13c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e59      	subs	r1, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d54:	400b      	ands	r3, r1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_I2C_Init+0x138>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1e59      	subs	r1, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	e051      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x168>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x18e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x196>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x1bc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	817b      	strh	r3, [r7, #10]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7fe ffe0 	bl	8001e98 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 80e0 	bne.w	80030a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4970      	ldr	r1, [pc, #448]	; (80030b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f964 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0d3      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_Master_Transmit+0x50>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0cc      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d007      	beq.n	8002f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2210      	movs	r2, #16
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a50      	ldr	r2, [pc, #320]	; (80030b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f89c 	bl	80030bc <I2C_MasterRequestWrite>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e08d      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fa4:	e066      	b.n	8003074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f9de 	bl	800336c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d11b      	bne.n	8003048 <HAL_I2C_Master_Transmit+0x188>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	6a39      	ldr	r1, [r7, #32]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f9ce 	bl	80033ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00d      	beq.n	8003074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e01a      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d194      	bne.n	8002fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	00100002 	.word	0x00100002
 80030b8:	ffff0000 	.word	0xffff0000

080030bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d006      	beq.n	80030e6 <I2C_MasterRequestWrite+0x2a>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d003      	beq.n	80030e6 <I2C_MasterRequestWrite+0x2a>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030e4:	d108      	bne.n	80030f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00b      	b.n	8003110 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	d107      	bne.n	8003110 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f84f 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003136:	d103      	bne.n	8003140 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e035      	b.n	80031b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800314c:	d108      	bne.n	8003160 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800315c:	611a      	str	r2, [r3, #16]
 800315e:	e01b      	b.n	8003198 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003160:	897b      	ldrh	r3, [r7, #10]
 8003162:	11db      	asrs	r3, r3, #7
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0306 	and.w	r3, r3, #6
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f063 030f 	orn	r3, r3, #15
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	490e      	ldr	r1, [pc, #56]	; (80031b8 <I2C_MasterRequestWrite+0xfc>)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f875 	bl	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e010      	b.n	80031b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4907      	ldr	r1, [pc, #28]	; (80031bc <I2C_MasterRequestWrite+0x100>)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f865 	bl	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	00010008 	.word	0x00010008
 80031bc:	00010002 	.word	0x00010002

080031c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d0:	e025      	b.n	800321e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d021      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7fe fe5d 	bl	8001e98 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d116      	bne.n	800321e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e023      	b.n	8003266 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10d      	bne.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4013      	ands	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	e00c      	b.n	800325e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4013      	ands	r3, r2
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf0c      	ite	eq
 8003256:	2301      	moveq	r3, #1
 8003258:	2300      	movne	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	429a      	cmp	r2, r3
 8003262:	d0b6      	beq.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327c:	e051      	b.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d123      	bne.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f043 0204 	orr.w	r2, r3, #4
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e046      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d021      	beq.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	f7fe fddb 	bl	8001e98 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d116      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0220 	orr.w	r2, r3, #32
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e020      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10c      	bne.n	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e00b      	b.n	800335e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	43da      	mvns	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d18d      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003378:	e02d      	b.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f878 	bl	8003470 <I2C_IsAcknowledgeFailed>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e02d      	b.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d021      	beq.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe fd81 	bl	8001e98 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d116      	bne.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e007      	b.n	80033e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d1ca      	bne.n	800337a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033fa:	e02d      	b.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f837 	bl	8003470 <I2C_IsAcknowledgeFailed>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e02d      	b.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d021      	beq.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7fe fd40 	bl	8001e98 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d116      	bne.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e007      	b.n	8003468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d1ca      	bne.n	80033fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003486:	d11b      	bne.n	80034c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003490:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0204 	orr.w	r2, r3, #4
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e128      	b.n	8003734 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a90      	ldr	r2, [pc, #576]	; (800373c <HAL_I2S_Init+0x26c>)
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7fe fb33 	bl	8001b68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003518:	f023 030f 	bic.w	r3, r3, #15
 800351c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2202      	movs	r2, #2
 8003524:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d060      	beq.n	80035f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003536:	2310      	movs	r3, #16
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e001      	b.n	8003540 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b20      	cmp	r3, #32
 8003546:	d802      	bhi.n	800354e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800354e:	2001      	movs	r0, #1
 8003550:	f001 fad4 	bl	8004afc <HAL_RCCEx_GetPeriphCLKFreq>
 8003554:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355e:	d125      	bne.n	80035ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	3305      	adds	r3, #5
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	e01f      	b.n	80035ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	fbb2 f2f3 	udiv	r2, r2, r3
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	461a      	mov	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	3305      	adds	r3, #5
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	e00e      	b.n	80035ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	461a      	mov	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	3305      	adds	r3, #5
 80035c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4a5c      	ldr	r2, [pc, #368]	; (8003740 <HAL_I2S_Init+0x270>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	08db      	lsrs	r3, r3, #3
 80035d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	e003      	b.n	80035f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d902      	bls.n	8003604 <HAL_I2S_Init+0x134>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	2bff      	cmp	r3, #255	; 0xff
 8003602:	d907      	bls.n	8003614 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f043 0210 	orr.w	r2, r3, #16
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e08f      	b.n	8003734 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	ea42 0103 	orr.w	r1, r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	430a      	orrs	r2, r1
 8003626:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003632:	f023 030f 	bic.w	r3, r3, #15
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6851      	ldr	r1, [r2, #4]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6892      	ldr	r2, [r2, #8]
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	68d2      	ldr	r2, [r2, #12]
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6992      	ldr	r2, [r2, #24]
 800364a:	430a      	orrs	r2, r1
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003656:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d161      	bne.n	8003724 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a38      	ldr	r2, [pc, #224]	; (8003744 <HAL_I2S_Init+0x274>)
 8003664:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a37      	ldr	r2, [pc, #220]	; (8003748 <HAL_I2S_Init+0x278>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_I2S_Init+0x1a4>
 8003670:	4b36      	ldr	r3, [pc, #216]	; (800374c <HAL_I2S_Init+0x27c>)
 8003672:	e001      	b.n	8003678 <HAL_I2S_Init+0x1a8>
 8003674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	4932      	ldr	r1, [pc, #200]	; (8003748 <HAL_I2S_Init+0x278>)
 8003680:	428a      	cmp	r2, r1
 8003682:	d101      	bne.n	8003688 <HAL_I2S_Init+0x1b8>
 8003684:	4a31      	ldr	r2, [pc, #196]	; (800374c <HAL_I2S_Init+0x27c>)
 8003686:	e001      	b.n	800368c <HAL_I2S_Init+0x1bc>
 8003688:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800368c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003690:	f023 030f 	bic.w	r3, r3, #15
 8003694:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <HAL_I2S_Init+0x278>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_I2S_Init+0x1d4>
 80036a0:	4b2a      	ldr	r3, [pc, #168]	; (800374c <HAL_I2S_Init+0x27c>)
 80036a2:	e001      	b.n	80036a8 <HAL_I2S_Init+0x1d8>
 80036a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a8:	2202      	movs	r2, #2
 80036aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <HAL_I2S_Init+0x278>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_I2S_Init+0x1ea>
 80036b6:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_I2S_Init+0x27c>)
 80036b8:	e001      	b.n	80036be <HAL_I2S_Init+0x1ee>
 80036ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ca:	d003      	beq.n	80036d4 <HAL_I2S_Init+0x204>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80036d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	e001      	b.n	80036e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036ea:	4313      	orrs	r3, r2
 80036ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036f4:	4313      	orrs	r3, r2
 80036f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036fe:	4313      	orrs	r3, r2
 8003700:	b29a      	uxth	r2, r3
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	4313      	orrs	r3, r2
 8003706:	b29b      	uxth	r3, r3
 8003708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800370c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <HAL_I2S_Init+0x278>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_I2S_Init+0x24c>
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <HAL_I2S_Init+0x27c>)
 800371a:	e001      	b.n	8003720 <HAL_I2S_Init+0x250>
 800371c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003720:	897a      	ldrh	r2, [r7, #10]
 8003722:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	080039d9 	.word	0x080039d9
 8003740:	cccccccd 	.word	0xcccccccd
 8003744:	08003b61 	.word	0x08003b61
 8003748:	40003800 	.word	0x40003800
 800374c:	40003400 	.word	0x40003400

08003750 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_I2S_Receive+0x1c>
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b4      	b.n	80038da <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_I2S_Receive+0x30>
 800377c:	2302      	movs	r3, #2
 800377e:	e0ac      	b.n	80038da <HAL_I2S_Receive+0x18a>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d005      	beq.n	80037a0 <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
 800379e:	e09c      	b.n	80038da <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2204      	movs	r2, #4
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d002      	beq.n	80037cc <HAL_I2S_Receive+0x7c>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d10a      	bne.n	80037e2 <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	865a      	strh	r2, [r3, #50]	; 0x32
 80037e0:	e005      	b.n	80037ee <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d007      	beq.n	800380e <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800380c:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800381c:	d14f      	bne.n	80038be <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8003834:	e043      	b.n	80038be <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	2101      	movs	r1, #1
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f955 	bl	8003aec <I2S_WaitFlagStateUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00f      	beq.n	8003868 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e038      	b.n	80038da <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	b292      	uxth	r2, r2
 8003874:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	1c9a      	adds	r2, r3, #2
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d110      	bne.n	80038be <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f043 0202 	orr.w	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1b6      	bne.n	8003836 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10e      	bne.n	8003972 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003962:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ffb8 	bl	80038e2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	b292      	uxth	r2, r2
 800398e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	1c9a      	adds	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ff93 	bl	80038f6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d13a      	bne.n	8003a6a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d109      	bne.n	8003a12 <I2S_IRQHandler+0x3a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d102      	bne.n	8003a12 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ffb4 	bl	800397a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d126      	bne.n	8003a6a <I2S_IRQHandler+0x92>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d11f      	bne.n	8003a6a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a38:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f043 0202 	orr.w	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ff50 	bl	800390a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d136      	bne.n	8003ae4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d109      	bne.n	8003a94 <I2S_IRQHandler+0xbc>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d102      	bne.n	8003a94 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff ff45 	bl	800391e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d122      	bne.n	8003ae4 <I2S_IRQHandler+0x10c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d11b      	bne.n	8003ae4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aba:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ff13 	bl	800390a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003afc:	f7fe f9cc 	bl	8001e98 <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003b02:	e018      	b.n	8003b36 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d014      	beq.n	8003b36 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003b0c:	f7fe f9c4 	bl	8001e98 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d902      	bls.n	8003b22 <I2S_WaitFlagStateUntilTimeout+0x36>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e00f      	b.n	8003b56 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1d7      	bne.n	8003b04 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a92      	ldr	r2, [pc, #584]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b7a:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b7c:	e001      	b.n	8003b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a8b      	ldr	r2, [pc, #556]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b98:	4b8a      	ldr	r3, [pc, #552]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b9a:	e001      	b.n	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bac:	d004      	beq.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 8099 	bne.w	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d107      	bne.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f925 	bl	8003e1c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d107      	bne.n	8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9c8 	bl	8003f7c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d13a      	bne.n	8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d035      	beq.n	8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a6e      	ldr	r2, [pc, #440]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c0a:	4b6e      	ldr	r3, [pc, #440]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c0c:	e001      	b.n	8003c12 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4969      	ldr	r1, [pc, #420]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c1a:	428b      	cmp	r3, r1
 8003c1c:	d101      	bne.n	8003c22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c1e:	4b69      	ldr	r3, [pc, #420]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c20:	e001      	b.n	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c2a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c3a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f043 0202 	orr.w	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fe4f 	bl	800390a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	f040 80c3 	bne.w	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80bd 	beq.w	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a49      	ldr	r2, [pc, #292]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c9e:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ca0:	e001      	b.n	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4944      	ldr	r1, [pc, #272]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cae:	428b      	cmp	r3, r1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cb2:	4b44      	ldr	r3, [pc, #272]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cb4:	e001      	b.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cbe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f043 0204 	orr.w	r2, r3, #4
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fe11 	bl	800390a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ce8:	e089      	b.n	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d107      	bne.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8be 	bl	8003e80 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8fd 	bl	8003f18 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d12f      	bne.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d02a      	beq.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d40:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d4e:	e001      	b.n	8003d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4919      	ldr	r1, [pc, #100]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d60:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d62:	e001      	b.n	8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fdc1 	bl	800390a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d136      	bne.n	8003e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d031      	beq.n	8003e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a07      	ldr	r2, [pc, #28]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003da8:	e001      	b.n	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4902      	ldr	r1, [pc, #8]	; (8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003db6:	428b      	cmp	r3, r1
 8003db8:	d106      	bne.n	8003dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003dba:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dbc:	e006      	b.n	8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003dbe:	bf00      	nop
 8003dc0:	40003800 	.word	0x40003800
 8003dc4:	40003400 	.word	0x40003400
 8003dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003de0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f043 0204 	orr.w	r2, r3, #4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff fd87 	bl	800390a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dfc:	e000      	b.n	8003e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dfe:	bf00      	nop
}
 8003e00:	bf00      	nop
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c99      	adds	r1, r3, #2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d113      	bne.n	8003e76 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffc9 	bl	8003e08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c99      	adds	r1, r3, #2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6251      	str	r1, [r2, #36]	; 0x24
 8003e92:	8819      	ldrh	r1, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <I2SEx_TxISR_I2SExt+0x90>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <I2SEx_TxISR_I2SExt+0x22>
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <I2SEx_TxISR_I2SExt+0x94>)
 8003ea0:	e001      	b.n	8003ea6 <I2SEx_TxISR_I2SExt+0x26>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea6:	460a      	mov	r2, r1
 8003ea8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d121      	bne.n	8003f06 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <I2SEx_TxISR_I2SExt+0x90>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <I2SEx_TxISR_I2SExt+0x50>
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <I2SEx_TxISR_I2SExt+0x94>)
 8003ece:	e001      	b.n	8003ed4 <I2SEx_TxISR_I2SExt+0x54>
 8003ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	490d      	ldr	r1, [pc, #52]	; (8003f10 <I2SEx_TxISR_I2SExt+0x90>)
 8003edc:	428b      	cmp	r3, r1
 8003ede:	d101      	bne.n	8003ee4 <I2SEx_TxISR_I2SExt+0x64>
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <I2SEx_TxISR_I2SExt+0x94>)
 8003ee2:	e001      	b.n	8003ee8 <I2SEx_TxISR_I2SExt+0x68>
 8003ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff81 	bl	8003e08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40003800 	.word	0x40003800
 8003f14:	40003400 	.word	0x40003400

08003f18 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68d8      	ldr	r0, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	1c99      	adds	r1, r3, #2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f30:	b282      	uxth	r2, r0
 8003f32:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d113      	bne.n	8003f74 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f5a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ff4a 	bl	8003e08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a20      	ldr	r2, [pc, #128]	; (800400c <I2SEx_RxISR_I2SExt+0x90>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <I2SEx_RxISR_I2SExt+0x16>
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <I2SEx_RxISR_I2SExt+0x94>)
 8003f90:	e001      	b.n	8003f96 <I2SEx_RxISR_I2SExt+0x1a>
 8003f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f96:	68d8      	ldr	r0, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	1c99      	adds	r1, r3, #2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fa2:	b282      	uxth	r2, r0
 8003fa4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d121      	bne.n	8004002 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a12      	ldr	r2, [pc, #72]	; (800400c <I2SEx_RxISR_I2SExt+0x90>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d101      	bne.n	8003fcc <I2SEx_RxISR_I2SExt+0x50>
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <I2SEx_RxISR_I2SExt+0x94>)
 8003fca:	e001      	b.n	8003fd0 <I2SEx_RxISR_I2SExt+0x54>
 8003fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	490d      	ldr	r1, [pc, #52]	; (800400c <I2SEx_RxISR_I2SExt+0x90>)
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	d101      	bne.n	8003fe0 <I2SEx_RxISR_I2SExt+0x64>
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <I2SEx_RxISR_I2SExt+0x94>)
 8003fde:	e001      	b.n	8003fe4 <I2SEx_RxISR_I2SExt+0x68>
 8003fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fe8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ff03 	bl	8003e08 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40003800 	.word	0x40003800
 8004010:	40003400 	.word	0x40003400

08004014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e267      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004032:	4b88      	ldr	r3, [pc, #544]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d00c      	beq.n	8004058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403e:	4b85      	ldr	r3, [pc, #532]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004046:	2b08      	cmp	r3, #8
 8004048:	d112      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b82      	ldr	r3, [pc, #520]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004056:	d10b      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05b      	beq.n	800411c <HAL_RCC_OscConfig+0x108>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d157      	bne.n	800411c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e242      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0x74>
 800407a:	4b76      	ldr	r3, [pc, #472]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a75      	ldr	r2, [pc, #468]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e01d      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x98>
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6f      	ldr	r2, [pc, #444]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b6d      	ldr	r3, [pc, #436]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6c      	ldr	r2, [pc, #432]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 80040ac:	4b69      	ldr	r3, [pc, #420]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a68      	ldr	r2, [pc, #416]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a65      	ldr	r2, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fd fee4 	bl	8001e98 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fd fee0 	bl	8001e98 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e207      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0xc0>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fd fed0 	bl	8001e98 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fd fecc 	bl	8001e98 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	; 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1f3      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0xe8>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800412a:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b47      	ldr	r3, [pc, #284]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413e:	2b08      	cmp	r3, #8
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b44      	ldr	r3, [pc, #272]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e1c7      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4937      	ldr	r1, [pc, #220]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_OscConfig+0x244>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd fe85 	bl	8001e98 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004192:	f7fd fe81 	bl	8001e98 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1a8      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4925      	ldr	r1, [pc, #148]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_OscConfig+0x244>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fe64 	bl	8001e98 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fd fe60 	bl	8001e98 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e187      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0x248>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fe44 	bl	8001e98 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004214:	f7fd fe40 	bl	8001e98 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e167      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x200>
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <HAL_RCC_OscConfig+0x248>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423a:	f7fd fe2d 	bl	8001e98 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	e00e      	b.n	8004260 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004242:	f7fd fe29 	bl	8001e98 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d907      	bls.n	8004260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e150      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004254:	40023800 	.word	0x40023800
 8004258:	42470000 	.word	0x42470000
 800425c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ea      	bne.n	8004242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8097 	beq.w	80043a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b81      	ldr	r3, [pc, #516]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b7d      	ldr	r3, [pc, #500]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a7c      	ldr	r2, [pc, #496]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
 800429a:	4b7a      	ldr	r3, [pc, #488]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b77      	ldr	r3, [pc, #476]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b74      	ldr	r3, [pc, #464]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a73      	ldr	r2, [pc, #460]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7fd fde9 	bl	8001e98 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fd fde5 	bl	8001e98 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e10c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x2ea>
 80042f0:	4b64      	ldr	r3, [pc, #400]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a63      	ldr	r2, [pc, #396]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x30c>
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a5e      	ldr	r2, [pc, #376]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a5b      	ldr	r2, [pc, #364]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 8004320:	4b58      	ldr	r3, [pc, #352]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a57      	ldr	r2, [pc, #348]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	4b55      	ldr	r3, [pc, #340]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a54      	ldr	r2, [pc, #336]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fd fdaa 	bl	8001e98 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd fda6 	bl	8001e98 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0cb      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b49      	ldr	r3, [pc, #292]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCC_OscConfig+0x334>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436c:	f7fd fd94 	bl	8001e98 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fd fd90 	bl	8001e98 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0b5      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ee      	bne.n	8004374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	4a38      	ldr	r2, [pc, #224]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80a1 	beq.w	80044f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b2:	4b34      	ldr	r3, [pc, #208]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d05c      	beq.n	8004478 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d141      	bne.n	800444a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCC_OscConfig+0x478>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd fd64 	bl	8001e98 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd fd60 	bl	8001e98 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e087      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b27      	ldr	r3, [pc, #156]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	491b      	ldr	r1, [pc, #108]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x478>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fd fd39 	bl	8001e98 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fd fd35 	bl	8001e98 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e05c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x416>
 8004448:	e054      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCC_OscConfig+0x478>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fd fd22 	bl	8001e98 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004458:	f7fd fd1e 	bl	8001e98 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e045      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x444>
 8004476:	e03d      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e038      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004484:	40023800 	.word	0x40023800
 8004488:	40007000 	.word	0x40007000
 800448c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x4ec>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d028      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d121      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d11a      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d111      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cc      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004518:	4b68      	ldr	r3, [pc, #416]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d90c      	bls.n	8004540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b65      	ldr	r3, [pc, #404]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b63      	ldr	r3, [pc, #396]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b8      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a58      	ldr	r2, [pc, #352]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a52      	ldr	r2, [pc, #328]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800457a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	494d      	ldr	r1, [pc, #308]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d044      	beq.n	8004624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d119      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e07f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d003      	beq.n	80045c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e06f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d2:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e067      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4934      	ldr	r1, [pc, #208]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f4:	f7fd fc50 	bl	8001e98 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7fd fc4c 	bl	8001e98 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e04f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d20c      	bcs.n	800464c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4916      	ldr	r1, [pc, #88]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800468a:	f000 f821 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800468e:	4602      	mov	r2, r0
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	490a      	ldr	r1, [pc, #40]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fd fbb0 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	0800556c 	.word	0x0800556c
 80046c8:	20000004 	.word	0x20000004
 80046cc:	20000008 	.word	0x20000008

080046d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b094      	sub	sp, #80	; 0x50
 80046d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	647b      	str	r3, [r7, #68]	; 0x44
 80046dc:	2300      	movs	r3, #0
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e0:	2300      	movs	r3, #0
 80046e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e8:	4b79      	ldr	r3, [pc, #484]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d00d      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x40>
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	f200 80e1 	bhi.w	80048bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0x34>
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d003      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x3a>
 8004702:	e0db      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b73      	ldr	r3, [pc, #460]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004706:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004708:	e0db      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470a:	4b73      	ldr	r3, [pc, #460]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800470c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800470e:	e0d8      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004710:	4b6f      	ldr	r3, [pc, #444]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471a:	4b6d      	ldr	r3, [pc, #436]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d063      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b6a      	ldr	r3, [pc, #424]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004730:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004738:	633b      	str	r3, [r7, #48]	; 0x30
 800473a:	2300      	movs	r3, #0
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
 800473e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004742:	4622      	mov	r2, r4
 8004744:	462b      	mov	r3, r5
 8004746:	f04f 0000 	mov.w	r0, #0
 800474a:	f04f 0100 	mov.w	r1, #0
 800474e:	0159      	lsls	r1, r3, #5
 8004750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004754:	0150      	lsls	r0, r2, #5
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4621      	mov	r1, r4
 800475c:	1a51      	subs	r1, r2, r1
 800475e:	6139      	str	r1, [r7, #16]
 8004760:	4629      	mov	r1, r5
 8004762:	eb63 0301 	sbc.w	r3, r3, r1
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004774:	4659      	mov	r1, fp
 8004776:	018b      	lsls	r3, r1, #6
 8004778:	4651      	mov	r1, sl
 800477a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800477e:	4651      	mov	r1, sl
 8004780:	018a      	lsls	r2, r1, #6
 8004782:	4651      	mov	r1, sl
 8004784:	ebb2 0801 	subs.w	r8, r2, r1
 8004788:	4659      	mov	r1, fp
 800478a:	eb63 0901 	sbc.w	r9, r3, r1
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a2:	4690      	mov	r8, r2
 80047a4:	4699      	mov	r9, r3
 80047a6:	4623      	mov	r3, r4
 80047a8:	eb18 0303 	adds.w	r3, r8, r3
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	462b      	mov	r3, r5
 80047b0:	eb49 0303 	adc.w	r3, r9, r3
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047c2:	4629      	mov	r1, r5
 80047c4:	024b      	lsls	r3, r1, #9
 80047c6:	4621      	mov	r1, r4
 80047c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047cc:	4621      	mov	r1, r4
 80047ce:	024a      	lsls	r2, r1, #9
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d6:	2200      	movs	r2, #0
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047e0:	f7fc f8e8 	bl	80009b4 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ec:	e058      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	4b38      	ldr	r3, [pc, #224]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	2200      	movs	r2, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	4611      	mov	r1, r2
 80047fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047fe:	623b      	str	r3, [r7, #32]
 8004800:	2300      	movs	r3, #0
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	f04f 0000 	mov.w	r0, #0
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	0159      	lsls	r1, r3, #5
 8004816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800481a:	0150      	lsls	r0, r2, #5
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4641      	mov	r1, r8
 8004822:	ebb2 0a01 	subs.w	sl, r2, r1
 8004826:	4649      	mov	r1, r9
 8004828:	eb63 0b01 	sbc.w	fp, r3, r1
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800483c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004840:	ebb2 040a 	subs.w	r4, r2, sl
 8004844:	eb63 050b 	sbc.w	r5, r3, fp
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	00eb      	lsls	r3, r5, #3
 8004852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004856:	00e2      	lsls	r2, r4, #3
 8004858:	4614      	mov	r4, r2
 800485a:	461d      	mov	r5, r3
 800485c:	4643      	mov	r3, r8
 800485e:	18e3      	adds	r3, r4, r3
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	464b      	mov	r3, r9
 8004864:	eb45 0303 	adc.w	r3, r5, r3
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004876:	4629      	mov	r1, r5
 8004878:	028b      	lsls	r3, r1, #10
 800487a:	4621      	mov	r1, r4
 800487c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004880:	4621      	mov	r1, r4
 8004882:	028a      	lsls	r2, r1, #10
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488a:	2200      	movs	r2, #0
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	61fa      	str	r2, [r7, #28]
 8004890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004894:	f7fc f88e 	bl	80009b4 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4613      	mov	r3, r2
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	3301      	adds	r3, #1
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ba:	e002      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3750      	adds	r7, #80	; 0x50
 80048c8:	46bd      	mov	sp, r7
 80048ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800
 80048d4:	00f42400 	.word	0x00f42400
 80048d8:	007a1200 	.word	0x007a1200

080048dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000004 	.word	0x20000004

080048f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048f8:	f7ff fff0 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0a9b      	lsrs	r3, r3, #10
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	0800557c 	.word	0x0800557c

0800491c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004940:	2b00      	cmp	r3, #0
 8004942:	d038      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004944:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800494a:	f7fd faa5 	bl	8001e98 <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004952:	f7fd faa1 	bl	8001e98 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e0bd      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004964:	4b61      	ldr	r3, [pc, #388]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f0      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	071b      	lsls	r3, r3, #28
 8004982:	495a      	ldr	r1, [pc, #360]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800498a:	4b57      	ldr	r3, [pc, #348]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800498c:	2201      	movs	r2, #1
 800498e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004990:	f7fd fa82 	bl	8001e98 <HAL_GetTick>
 8004994:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004998:	f7fd fa7e 	bl	8001e98 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e09a      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049aa:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8083 	beq.w	8004aca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	4b48      	ldr	r3, [pc, #288]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	4a47      	ldr	r2, [pc, #284]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d2:	6413      	str	r3, [r2, #64]	; 0x40
 80049d4:	4b45      	ldr	r3, [pc, #276]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049e0:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a42      	ldr	r2, [pc, #264]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049ec:	f7fd fa54 	bl	8001e98 <HAL_GetTick>
 80049f0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049f4:	f7fd fa50 	bl	8001e98 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e06c      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a06:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02f      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d028      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a30:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a46:	4a29      	ldr	r2, [pc, #164]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a4c:	4b27      	ldr	r3, [pc, #156]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d114      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fd fa1e 	bl	8001e98 <HAL_GetTick>
 8004a5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd fa1a 	bl	8001e98 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e034      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ee      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a8e:	d10d      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004a90:	4b16      	ldr	r3, [pc, #88]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa4:	4911      	ldr	r1, [pc, #68]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ab6:	6093      	str	r3, [r2, #8]
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac4:	4909      	ldr	r1, [pc, #36]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7d1a      	ldrb	r2, [r3, #20]
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004adc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	42470068 	.word	0x42470068
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40007000 	.word	0x40007000
 8004af4:	42470e40 	.word	0x42470e40
 8004af8:	424711e0 	.word	0x424711e0

08004afc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d140      	bne.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004b1a:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d131      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b30:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b32:	617b      	str	r3, [r7, #20]
          break;
 8004b34:	e031      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b36:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b42:	d109      	bne.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b4e:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e008      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b84:	0f1b      	lsrs	r3, r3, #28
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]
          break;
 8004b92:	e002      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
          break;
 8004b98:	bf00      	nop
        }
      }
      break;
 8004b9a:	bf00      	nop
    }
  }
  return frequency;
 8004b9c:	697b      	ldr	r3, [r7, #20]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	00bb8000 	.word	0x00bb8000
 8004bb4:	007a1200 	.word	0x007a1200
 8004bb8:	00f42400 	.word	0x00f42400

08004bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e041      	b.n	8004c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fd f844 	bl	8001c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f000 fae2 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d001      	beq.n	8004c74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e03c      	b.n	8004cee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <HAL_TIM_Base_Start+0xa0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d018      	beq.n	8004cb8 <HAL_TIM_Base_Start+0x5c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8e:	d013      	beq.n	8004cb8 <HAL_TIM_Base_Start+0x5c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1a      	ldr	r2, [pc, #104]	; (8004d00 <HAL_TIM_Base_Start+0xa4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00e      	beq.n	8004cb8 <HAL_TIM_Base_Start+0x5c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a19      	ldr	r2, [pc, #100]	; (8004d04 <HAL_TIM_Base_Start+0xa8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d009      	beq.n	8004cb8 <HAL_TIM_Base_Start+0x5c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <HAL_TIM_Base_Start+0xac>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <HAL_TIM_Base_Start+0x5c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <HAL_TIM_Base_Start+0xb0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d111      	bne.n	8004cdc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b06      	cmp	r3, #6
 8004cc8:	d010      	beq.n	8004cec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cda:	e007      	b.n	8004cec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40014000 	.word	0x40014000

08004d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d001      	beq.n	8004d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e044      	b.n	8004db2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d018      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x6c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d013      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x6c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00e      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x6c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d009      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x6c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <HAL_TIM_Base_Start_IT+0xbc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x6c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a16      	ldr	r2, [pc, #88]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d111      	bne.n	8004da0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b06      	cmp	r3, #6
 8004d8c:	d010      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0201 	orr.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9e:	e007      	b.n	8004db0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40014000 	.word	0x40014000

08004dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d122      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d11b      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0202 	mvn.w	r2, #2
 8004e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f9b5 	bl	8005186 <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f9a7 	bl	8005172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f9b8 	bl	800519a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d122      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d11b      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0204 	mvn.w	r2, #4
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f98b 	bl	8005186 <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f97d 	bl	8005172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f98e 	bl	800519a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0208 	mvn.w	r2, #8
 8004ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2204      	movs	r2, #4
 8004eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f961 	bl	8005186 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f953 	bl	8005172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f964 	bl	800519a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0210 	mvn.w	r2, #16
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2208      	movs	r2, #8
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f937 	bl	8005186 <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f929 	bl	8005172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f93a 	bl	800519a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0201 	mvn.w	r2, #1
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fb ff84 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fab2 	bl	80054e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8ff 	bl	80051ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d10e      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d107      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0220 	mvn.w	r2, #32
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa7c 	bl	80054d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIM_ConfigClockSource+0x1c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e0b4      	b.n	800516a <HAL_TIM_ConfigClockSource+0x186>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800501e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005038:	d03e      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0xd4>
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503e:	f200 8087 	bhi.w	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	f000 8086 	beq.w	8005156 <HAL_TIM_ConfigClockSource+0x172>
 800504a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504e:	d87f      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b70      	cmp	r3, #112	; 0x70
 8005052:	d01a      	beq.n	800508a <HAL_TIM_ConfigClockSource+0xa6>
 8005054:	2b70      	cmp	r3, #112	; 0x70
 8005056:	d87b      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b60      	cmp	r3, #96	; 0x60
 800505a:	d050      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x11a>
 800505c:	2b60      	cmp	r3, #96	; 0x60
 800505e:	d877      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b50      	cmp	r3, #80	; 0x50
 8005062:	d03c      	beq.n	80050de <HAL_TIM_ConfigClockSource+0xfa>
 8005064:	2b50      	cmp	r3, #80	; 0x50
 8005066:	d873      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d058      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x13a>
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d86f      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b30      	cmp	r3, #48	; 0x30
 8005072:	d064      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b30      	cmp	r3, #48	; 0x30
 8005076:	d86b      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b20      	cmp	r3, #32
 800507a:	d060      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d867      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d05c      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005084:	2b10      	cmp	r3, #16
 8005086:	d05a      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	e062      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6899      	ldr	r1, [r3, #8]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f000 f98d 	bl	80053b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	609a      	str	r2, [r3, #8]
      break;
 80050b6:	e04f      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6899      	ldr	r1, [r3, #8]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f000 f976 	bl	80053b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050da:	609a      	str	r2, [r3, #8]
      break;
 80050dc:	e03c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 f8ea 	bl	80052c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2150      	movs	r1, #80	; 0x50
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f943 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 80050fc:	e02c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6859      	ldr	r1, [r3, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	461a      	mov	r2, r3
 800510c:	f000 f909 	bl	8005322 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2160      	movs	r1, #96	; 0x60
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f933 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 800511c:	e01c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6859      	ldr	r1, [r3, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	461a      	mov	r2, r3
 800512c:	f000 f8ca 	bl	80052c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2140      	movs	r1, #64	; 0x40
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f923 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 800513c:	e00c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f000 f91a 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 800514e:	e003      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
      break;
 8005154:	e000      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <TIM_Base_SetConfig+0xe4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00f      	beq.n	80051fc <TIM_Base_SetConfig+0x38>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0x38>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a31      	ldr	r2, [pc, #196]	; (80052ac <TIM_Base_SetConfig+0xe8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0x38>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a30      	ldr	r2, [pc, #192]	; (80052b0 <TIM_Base_SetConfig+0xec>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0x38>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a2f      	ldr	r2, [pc, #188]	; (80052b4 <TIM_Base_SetConfig+0xf0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d108      	bne.n	800520e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a25      	ldr	r2, [pc, #148]	; (80052a8 <TIM_Base_SetConfig+0xe4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01b      	beq.n	800524e <TIM_Base_SetConfig+0x8a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d017      	beq.n	800524e <TIM_Base_SetConfig+0x8a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a22      	ldr	r2, [pc, #136]	; (80052ac <TIM_Base_SetConfig+0xe8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d013      	beq.n	800524e <TIM_Base_SetConfig+0x8a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <TIM_Base_SetConfig+0xec>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00f      	beq.n	800524e <TIM_Base_SetConfig+0x8a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a20      	ldr	r2, [pc, #128]	; (80052b4 <TIM_Base_SetConfig+0xf0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00b      	beq.n	800524e <TIM_Base_SetConfig+0x8a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <TIM_Base_SetConfig+0xf4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d007      	beq.n	800524e <TIM_Base_SetConfig+0x8a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1e      	ldr	r2, [pc, #120]	; (80052bc <TIM_Base_SetConfig+0xf8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d003      	beq.n	800524e <TIM_Base_SetConfig+0x8a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <TIM_Base_SetConfig+0xfc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d108      	bne.n	8005260 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <TIM_Base_SetConfig+0xe4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d103      	bne.n	8005294 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	615a      	str	r2, [r3, #20]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40014400 	.word	0x40014400
 80052c0:	40014800 	.word	0x40014800

080052c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0201 	bic.w	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 030a 	bic.w	r3, r3, #10
 8005300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	621a      	str	r2, [r3, #32]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 0210 	bic.w	r2, r3, #16
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800534c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800535e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	f043 0307 	orr.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	431a      	orrs	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e050      	b.n	80054b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d018      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d013      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a16      	ldr	r2, [pc, #88]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10c      	bne.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800548c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	4313      	orrs	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40014000 	.word	0x40014000

080054d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4d0d      	ldr	r5, [pc, #52]	; (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	; (8005538 <__libc_init_array+0x3c>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2600      	movs	r6, #0
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4d0b      	ldr	r5, [pc, #44]	; (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	; (8005540 <__libc_init_array+0x44>)
 8005510:	f000 f820 	bl	8005554 <_init>
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2600      	movs	r6, #0
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	0800558c 	.word	0x0800558c
 8005538:	0800558c 	.word	0x0800558c
 800553c:	0800558c 	.word	0x0800558c
 8005540:	08005590 	.word	0x08005590

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <_init>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	bf00      	nop
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr

08005560 <_fini>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr
